type: function
parameters:
  - id: mElAMdW9foRjZXTbLpUNW
    key: designed
    type: source
    source:
      variableFrom: tool
      agent:
        id: 20240509110939-PKK9oJ
        from: assistant
        parameters:
          components: "{{components}}"
          framework: "{{framework}}"
          question: "{{question}}"
  - id: EREc7XAQ22Nd0pjVdPm6O
    key: components
    type: source
    source:
      variableFrom: tool
      agent:
        id: 20240513213411-LpgUcm
        from: assistant
        parameters: {}
  - id: DXmLFHgstbGDA9hiMYFdX
    key: framework
  - id: 0IcQd4ZJJwq8CTdIkn5t1
    key: question
prompts:
  Uj0m-ctvoWgzA_IJFDPGu:
    index: 0
    data:
      type: message
      data:
        id: Uj0m-ctvoWgzA_IJFDPGu
        role: user
        content: "{{ question }}"
outputVariables:
  - id: BzAp-83bBvsJg5pUtbx0v
    name: supportedList
    type: array
    required: true
    element:
      id: -ew2QOcGf778mkzdTugs5
      name: element
      type: string
      required: false
  - id: SHkfltI0TMTnIsT1PNhar
    name: examplesList
    type: array
    element:
      id: qvypHo5hTw677af_YafhI
      name: element
      type: string
      required: false
    required: true
  - id: ZMjZKNOKHx2E9pj4jucx5
    name: componentCondition
    type: string
    required: true
  - id: 8PduEgAf9i2OKcLUntudY
    name: componentMetadata
    type: string
    required: true
  - id: mXrPK90UGMuoWFvLJUrOf
    name: importantCondition
    type: string
    required: true
id: 20240514194312-Jdkxzd
createdAt: 2024-05-13T13:34:11.700Z
updatedAt: 2024-05-13T13:34:11.700Z
createdBy: z1TCComgCJNHbHWetTWGdhPB6NYZ2ReDjLu
updatedBy: z1TCComgCJNHbHWetTWGdhPB6NYZ2ReDjLu
name: inject-designed-components
code: >+
  let supportedList = [];

  let examplesList = [];




  designed.packages?.forEach(item => {
    components.supportedList.forEach(ytem => {
      if(ytem.startsWith(item)) supportedList.push(ytem)
    })
    components.examplesList.forEach(ytem => {
      if(ytem.startsWith(item)) examplesList.push(ytem)
    })
  })




  const componentCondition = `Multiple library components can be used while
  creating a new component in order to help you do a better design job, faster.


  Very important: You must use the components provided by the built-in
  libraries, any other components not provided by the built-in libraries will
  result in an error!

  Very important: Any components you need to import should be imported from
  \`@blocklet/pages-kit/builtin/{libraryName}\`

  Very important: You must import icon this way: <Icon icon="iconName"
  {...otherIconProps}/>

  Very important: You must import React from '@blocklet/pages-kit/builtin/react'
  in code line 1


  Builtin Libraries: 

  ---------------------------

  ${supportedList.join('\n')}

  ---------------------------


  Builtin Libraries Example: 

  ---------------------------

  ${examplesList.join('\n')}

  ---------------------------


  Icons can optionally be used when making the ${framework} component


  Suggested icons:

  ---------------------------

  ${designed.icons.join('\n')}

  ---------------------------

  ` 


  const componentMetadata = `- COMPONENT NAME : ${designed.name}


  - COMPONENT DESCRIPTION: ${question}


  - COMPONENT SUGGESTION: ${designed.description}

  ` 



  const importantCondition = `Important:

  - Make sure you import provided components libraries and icons that are
  provided to you if you use them !

  - The styles should be written directly in the elements sx tags . DO NOT WRITE
  ANY CSS OUTSIDE OF SX. DO NOT IMPORT ANY CSS FILE.  DO NOT USE ANY <style> IN
  THE CODE ! SX STYLING ONLY !

  - Do not use libraries or imports except what is provided in this task;
  otherwise it would crash the component because not installed. Do not import
  extra libraries besides what is provided above !

  - DO NOT HAVE ANY DYNAMIC DATA OR DATA PROPS ! Components are meant to be
  working as is without supplying any variable to them when importing them !
  Only write a component that render directly with placeholders as data,
  component not supplied with any dynamic data.

  - Only write the code for the component; Do not write extra code to import it!
  The code will directly be stored in an individual .tsx file!

  - Very important : Your component should be exported as default!

  `



  return {
    supportedList,
    examplesList,
    componentCondition,
    componentMetadata,
    importantCondition
  }



