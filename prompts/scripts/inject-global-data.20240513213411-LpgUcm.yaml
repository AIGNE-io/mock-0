type: function
parameters:
  - id: eNNa4ycuDK1x30ujUDvOf
    key: dumpListText
    type: source
    source:
      variableFrom: knowledge
      knowledge:
        id: "443696818363039744"
        from: knowledge
        parameters:
          message: "{{message}}"
          searchAll: true
prompts:
  Uj0m-ctvoWgzA_IJFDPGu:
    index: 0
    data:
      type: message
      data:
        id: Uj0m-ctvoWgzA_IJFDPGu
        role: user
        content: "{{ question }}"
outputVariables:
  - id: FqmWDOp0hQ_abMK2scON4
    name: supportedList
    type: array
    description: ""
    required: true
    element:
      id: x42M3i6SUQPpF12afDzUn
      name: element
      type: string
      required: true
  - id: ZfTSAGszKYFiq13ycnKSq
    name: examplesList
    type: array
    required: true
    element:
      id: AI3TjwhK1rCjDy8ZGJ7Ku
      name: element
      type: string
      required: true
  - id: Ai4zja-gLV1h0vHrky71J
    name: librariesCondiction
    required: true
  - id: bzQ0aqTpqWyenbIU9yZw4
    name: codingCondiction
    required: true
  - id: k13gHZGgYwJO-C0vYOwQF
    name: designSystemCondiction
    required: true
id: 20240513213411-LpgUcm
createdAt: 2024-05-13T13:34:11.700Z
updatedAt: 2024-05-13T13:34:11.700Z
createdBy: z1TCComgCJNHbHWetTWGdhPB6NYZ2ReDjLu
updatedBy: z1TCComgCJNHbHWetTWGdhPB6NYZ2ReDjLu
name: inject-global-data
code: >+
  let dumpList = [];


  try {
    dumpList = JSON.parse(dumpListText)
    dumpList = dumpList.map(item => {
      if (item.content) {
        try {
          return JSON.parse(item.content)
        } catch (e) {
          // ignore error
        }
      }
      return false
    }).filter(Boolean)
  } catch (e) {
    // ignore error
    console.error(e)
  }


  console.log('dumpList count: ', dumpList.length)


  // filter empty 

  dumpList = dumpList.filter(({ name, description, docs }) => {
    if (!name || !description || !docs) {
      return false
    }
    return true
  })



  const supportedList = dumpList
    .map(({ name, description, docs }) => {
      return `${name}: ${description}, provided components: [${docs?.components?.join(', ')}]`;
    });

  const examplesList = dumpList
    .map(({ name, docs }) => {
      let examplesText = "// No examples"

      if (docs?.examples?.length) {
        examplesText = docs?.examples?.map(({ source, code }, index) => {
          return `// [${index + 1}] ${source}
  ${code}`;
        }).join('\n');
      }
      return `${name} Examples: 
  \`\`\`tsx
    ${examplesText}
  \`\`\`

  `;
    }).filter(Boolean);


  // eslint-disable-next-line no-console

  console.info('result: ', {
    supportedList,
    examplesList,
  });



  const librariesCondiction = `Multiple library components can be used while
  creating a new component in order to help you do a better design job, faster.


  Very Important: 

  - You must use the components provided by the Builtin Libraries, any other
  components not provided by the Builtin Libraries will result in an error!

  - You must import React from '@blocklet/pages-kit/builtin/react' in code line
  1

  - You must use icon via '@blocklet/pages-kit/builtin/iconify/react', DO NOT
  IMPORT ICON FROM OTHER LIBRARY! DO NOT IMPORT ICON FROM MUI! 


  `


  const codingCondiction = `The full code for the component, which uses mui sx
  props if needed, and optionally, library components and icons, based on the
  provided design task.


  Very Important:

  - Make sure you import provided components libraries and icons that are
  provided to you if you use them !

  - The styles for mui components should be written directly into the element sx
  tags. Do not import any css files. Do not use any <style> in your code!

  - If you need to override the style of a component, you can wrap it with mui's
  <Box sx={{...rewriteStyles}}> to wrap it!

  - Do not use libraries or imports except what is provided in this task;
  otherwise it would crash the component because not installed. Do not import
  extra libraries besides what is provided above !

  - Only write the code for the component; Do not write extra code to import it!
  The code will directly be stored in an individual .tsx file!

  - Your component should be exported as default

  - Some of the data in the component needs to be passed in externally,
  including, but not limited to: data, text, etc. Passing in functions
  externally is not allowed and will result in a component error!

  - The code must be formatted

  - You need to export a constant array object called PROPERTIES_SCHEMA based on
  PROPERTIES_SCHEMA_PROPS below to tell people how to use the component.
  PROPERTIES_SCHEMA should be as close to the last line of the import statement
  as possible, to make it easier for other people to see this code.


  PROPERTIES_SCHEMA_PROPS:

  ---------------------------

  type PROPERTIES_SCHEMA_PROPS = {
    id: string; // unique random id
    key: string; // prop key
    type: 'number' | 'boolean' | 'json' | 'url' | 'string'; // enum type, not include function
    locales?: { // locales contains at least the values en and zh.
      [locale: string]: {
        name?: string; // input label name
        defaultValue?: any; // match the type, when the type is "json", defaultValue should be a string after JSON.stringify(defaultValue, null, 2)
      };
    };
  }

  ---------------------------

  `


  const designSystemCondiction = `

  If you judge it is relevant to do so, you can specify Builtin Libraries
  Components to use in the component update.


  You can also specify the use of iconify icons if you see that the user's
  update request requires it.


  You are very familiar with mui, iconify icons and are skilled in applying
  their components and understanding their parameters.


  You can distill the key information in a short User Query and describe it as
  you add details. For some simple User Query, you can even produce hundreds of
  words of description!

  `



  // --------- protected code ---------


  return {
    supportedList: supportedList,
    examplesList: examplesList,
    librariesCondiction: librariesCondiction,
    codingCondiction: codingCondiction,
    designSystemCondiction: designSystemCondiction
  }



