type: function
parameters:
  - id: eNNa4ycuDK1x30ujUDvOf
    key: dumpListText
    type: source
    source:
      variableFrom: knowledge
      knowledge:
        id: "443696818363039744"
        from: knowledge
        parameters:
          message: "{{message}}"
          searchAll: true
prompts:
  Uj0m-ctvoWgzA_IJFDPGu:
    index: 0
    data:
      type: message
      data:
        id: Uj0m-ctvoWgzA_IJFDPGu
        role: user
        content: "{{ question }}"
outputVariables:
  - id: FqmWDOp0hQ_abMK2scON4
    name: supportedList
    type: array
    description: ""
    required: true
    element:
      id: x42M3i6SUQPpF12afDzUn
      name: element
      type: string
      required: true
  - id: ZfTSAGszKYFiq13ycnKSq
    name: examplesList
    type: array
    required: true
    element:
      id: AI3TjwhK1rCjDy8ZGJ7Ku
      name: element
      type: string
      required: true
  - id: Ai4zja-gLV1h0vHrky71J
    name: librariesCondiction
    required: true
  - id: bzQ0aqTpqWyenbIU9yZw4
    name: codingCondiction
    required: true
id: 20240513213411-LpgUcm
createdAt: 2024-05-13T13:34:11.700Z
updatedAt: 2024-05-13T13:34:11.700Z
createdBy: z1TCComgCJNHbHWetTWGdhPB6NYZ2ReDjLu
updatedBy: z1TCComgCJNHbHWetTWGdhPB6NYZ2ReDjLu
name: inject-global-data
code: >+
  let dumpList = [];


  try{
    dumpList = JSON.parse(dumpListText)
    dumpList = dumpList.map(item => {
      if(item.content){
        try{
          return JSON.parse(item.content)
        } catch (e){
          // ignore error
        }
      }
      return false
    }).filter(Boolean)
  } catch (e){
    // ignore error
    console.error(e)
  }


  console.log('dumpList count: ', dumpList.length)


  // filter empty 

  dumpList = dumpList.filter(({name, description, docs}) => {
    if(!name || !description || !docs){
      return false
    }
    return true
  })



  const supportedList = dumpList
    .map(({ name, description, docs }) => {
      return `${name}: ${description}, provided [${docs?.components?.join(', ')}] components`;
    });

  const examplesList = dumpList
    .map(({ name, docs }) => {
      let examplesText = "// No examples"

      if (docs?.examples?.length) {
        examplesText = docs?.examples?.map(({ source, code }, index) => {
          return `// [${index + 1}] ${source}
  ${code}`;
        }).join('\n');
      }
      return `${name} Examples: 
  \`\`\`tsx
    ${examplesText}
  \`\`\`

  `;
    }).filter(Boolean);


  // eslint-disable-next-line no-console

  console.info('result: ', {
    supportedList,
    examplesList,
  });



  const librariesCondiction = `Multiple library components can be used while
  creating a new component in order to help you do a better design job, faster.


  Very important: You must import React from '@blocklet/pages-kit/builtin/react'
  in code line 1


  Very important: Any components you need to import should be imported from
  '@blocklet/pages-kit/builtin/{libraryName}', the libraryName only can use
  Builtin Libraries 


  Very important: You must use the components provided by the built-in
  libraries, any other components not provided by the built-in libraries will
  result in an error!


  Very important: You must import and use icon this way, ONLY CAN USE ICONIFY: 

  ---------------------------

  import { Icon } from '@blocklet/pages-kit/builtin/iconify/react';


  <Icon icon="iconName" {...otherIconProps}/>

  ---------------------------


  `


  const codingCondiction = `The full code for the component, which uses mui sx
  props if needed, and optionally, library components and icons, based on the
  provided design task.


  Important:

  - Make sure you import provided components libraries and icons that are
  provided to you if you use them !

  - The styles should be written directly in the elements sx tags . DO NOT WRITE
  ANY CSS OUTSIDE OF SX. DO NOT IMPORT ANY CSS FILE.  DO NOT USE ANY <style> IN
  THE CODE ! SX STYLING ONLY !

  - Do not use libraries or imports except what is provided in this task;
  otherwise it would crash the component because not installed. Do not import
  extra libraries besides what is provided above !

  - Only write the code for the component; Do not write extra code to import it!
  The code will directly be stored in an individual .tsx file!



  Very Important:

  - Your component should be exported as default

  - All data in the component needs to be passed in externally, don't write any
  data to death, including but not limited to: data, text, etc

  - You need to export a constant array object called PROPERTIES_SCHEMA based on
  PROPERTIES_SCHEMA_PROPS below to tell people how to use the component.
  PROPERTIES_SCHEMA should be placed in front of the code



  PROPERTIES_SCHEMA_PROPS:

  ---------------------------

  type PROPERTIES_SCHEMA_PROPS {
    id: string; // Unique random uuid of 16 bits in length
    key: string; // prop key
    type: 'number' | 'boolean' | 'json' | 'url' | 'string'; // prop type
    locales?: { // locales has at least a value for en | zh.
      [locale: string]: {
        name?: string;
        defaultValue?: any;
      };
    };
  }

  ---------------------------

  `



  // --------- protected code ---------


  return {
    supportedList: supportedList,
    examplesList: examplesList,
    librariesCondiction: librariesCondiction,
    codingCondiction: codingCondiction
  }



